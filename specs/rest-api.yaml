openapi: 3.0.1
info:
  title: Deskshare
  description: 'Desksharing system'
  license:
    name: MIT open source license
    url: https://github.com/otuskotlin/202105-otuskotlin-marketplace/blob/main/LICENSE
  version: 0.0.1
servers:
  - url: https://localhost/
tags:
  -   name: "reservation"
      description: "CRUD for workspace reservation"
  -   name: "system"
      description: "System calls"
paths:
  /reservations:
    get:
      tags:
        - reservation
      summary: Collection of reservations
      description: Collection of reservations
      operationId: collectionOfReservations
      parameters:
        - in: header
          name: X-Request-ID
          description: Request ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Collection of reservations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionOfReservationDto'
        401:
          description: Unauthorized
        500:
          description: Internal server error
    post:
      tags:
        - reservation
      summary: Create new reservation
      description: Create new reservation
      operationId: createReservation
      parameters:
        - in: header
          name: X-Request-ID
          description: Request ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: New reservation structure
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReservationDto'
        required: true
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewReservationDto'
        401:
          description: Unauthorized
        422:
          description: Validation Error
        500:
          description: Internal server error

  /reservations/{id}:
    put:
      tags:
        - reservation
      summary: Update the reservation by ID
      description: Update the reservation by ID
      operationId: updateReservation
      parameters:
        - in: header
          name: X-Request-ID
          description: Request ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Chnaged reservation structure
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReservationDto'
        required: true
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewReservationDto'
        401:
          description: Unauthorized
        422:
          description: Validation Error
        500:
          description: Internal server error

    get:
      tags:
        - reservation
      summary: Find a reservation by ID
      description: Returns a single reservation
      operationId: getReservationById
      parameters:
        - in: path
          name: id
          description: ID of reservation to return
          required: true
          schema:
            type: string
            format: uuid
        - in: header
          name: X-Request-ID
          description: Request ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewReservationDto'
        400:
          description: Invalid ID supplied
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: Reservation not found
          content: {}
        500:
          description: Internal server error
          content: {}
    delete:
      tags:
        - reservation
      summary: Delete a reservation by ID
      description: Returns a single reservation
      operationId: deleteReservationById
      parameters:
        - in: path
          name: id
          description: ID of reservation to return
          required: true
          schema:
            type: string
            format: uuid
        - in: header
          name: X-Request-ID
          description: Request ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewReservationDto'
        400:
          description: Invalid ID supplied
          content: { }
        401:
          description: Unauthorized
          content: { }
        404:
          description: Reservation not found
          content: { }
        422:
          description: Validation Error
          content: { }
        500:
          description: Internal server error
          content: { }

  /health:
    get:
      tags:
        - system
      summary: Health route
      operationId: health
      responses:
        204:
          description: The system is healthy

components:
  schemas:
    CreateReservationDto:
      type: object
      description: "Create reservation Dto structure"
      properties:
        description:
          type: string
          title: Description
          description: Description
        userId:
          type: string
          format: uuid
          title: User ID
          description: User ID / owner of the reservation
        workspaceId:
          type: string
          format: uuid
          title: Workspace ID
          description: Workspace ID for the reservation
        from:
          type: string
          format: date-time
          title: Date/time from
        until:
          type: string
          format: date-time
          title: Date/time until

    UpdateReservationDto:
      description: "Update reservation Dto structure"
      allOf:
        - $ref: '#/components/schemas/CreateReservationDto'
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: Reservation ID
            status:
              $ref: '#/components/schemas/ReservationStatusDto'

    ViewReservationDto:
      description: "View reservation Dto structure"
      allOf:
        - $ref: '#/components/schemas/UpdateReservationDto'
        - type: object
          properties:
            createdAt:
              type: string
              format: date-time
              description: Reservation created timestamp

    ReservationStatusDto:
      type: string
      description: "Reservation status"
      enum:
        - pending
        - canceled
        - check_in
        - check_out

    CollectionOfReservationDto:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        reservations:
          type: array
          items:
            $ref: '#/components/schemas/ViewReservationDto'

    PaginationMeta:
      type: object
      properties:
        pageSize:
          type: integer
          format: int32
          description: Size for one page
        total:
          type: integer
          format: int32
          description: Total number of items
        currentPage:
          type: integer
          format: int32
          description: Number of current page
